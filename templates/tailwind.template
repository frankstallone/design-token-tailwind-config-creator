<%

print(`
/*
  * Design Token Tailwind Config Creator
  * https://github.com/frankstallone/design-token-tailwind-config-creator
  * Generated on ${new Date().toUTCString()}
  * To be used as a Preset in consumer @ https://tailwindcss.com/docs/presets
  *
  */`
  );

/**
 * Find all the color names, map through those color names to find
 * Style Dictionary tokens that match and format them for Tailwind
 *
 * @returns {object} Of config template for Tailwind
 */
 function processColorPalette() {
  // Grab all color tokens
  const colorTokens = dictionary.allTokens.filter((token) => token.attributes.category === 'color' && token.attributes.type === 'core');
  if (!colorTokens.length) return;

  // List all unique colors in attributes.item
  function findListOfColors(tokens) {
    const flag = {};
    const unique = [];
    tokens.forEach(token => {
      if (!flag[token.attributes.item]) {
        flag[token.attributes.item] = true;
        unique.push(token.attributes.item)
      }
    })
    return unique
  }
  const uniqueColors = findListOfColors(colorTokens);

  // Returns a specific color token
  function singleColorTokens(color) {
    return colorTokens.filter((token) => token.attributes.item === color)
  }

  // Returns an array of objects with a specific colors tokens
  function transformTokens(color) {
    tokensToTransform = singleColorTokens(color);
    const tokenKeyValues = tokensToTransform.map((token) => {
      if (token.attributes.subitem) {
        return `\n${token.attributes.subitem}: '${token.value}'`;
      }
      return `'${token.value}'`;
    })
    return tokenKeyValues;
  };

  // Map through the color category and store formatted color
  const transformedTokens = uniqueColors.map((color) => {
    const value = transformTokens(color);
    const token = singleColorTokens(color);
    if (token[0].attributes.subitem) {
      return `\n${color}: {${value}}`
    }
    return `\n${color}: ${value}`
  });

  print(`colors: {${transformedTokens}},`)

}

/**
 * Find the one font family we have and format for tailwind.config.js
 *
 * @returns [array] like item with font stack
 */

function processFontFamilyToken() {
  // Grab the only font family token
  const fontFamilyToken = dictionary.allTokens.filter((token) => token.attributes.category === 'font' && token.attributes.type === 'family');
  if (!fontFamilyToken.length) return;

  print(`fontFamily: [${fontFamilyToken[0].value}],`)
}

/**
 * General Style Dictionary to Tailwind Config processor
 *
 * @returns {object} Of config template for Tailwind
 */

function processGeneralFontTokens(type) {
  const specificTokens = dictionary.allTokens.filter(
    (token) =>
      // Grab the only matching attributes.type tokens
      (token.attributes.category === "font" && token.attributes.type === type) ||
      // Grab the only matching attributes.catagory tokens
      (token.attributes.type === "font" && token.attributes.category === type)
  );

  if (!specificTokens.length) return;

  // Returns an array of objects with a specific attributes.type tokens
  const tokenKeyValues = specificTokens.map((token) => {
    return `\n'${token.attributes.item}': '${token.value}'`;
  })

  print(`font${type[0].toUpperCase() + type.substring(1)}: {${tokenKeyValues}},`)

}


%>

module.exports = {
  theme: {
    <% processFontFamilyToken() %>
    <% processGeneralFontTokens('weight') %>
    <% processGeneralFontTokens('size') %>
    <% processColorPalette() %>
  },
  corePlugins: {},
  plugins: [
  ]
};
